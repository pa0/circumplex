---
title: "przeliczanie danych surowych"
author: "Paweł Kleka"
format: html
---

```{r}
library(dplyr)

# dane
load('Adaptacja.RData');
#dane1 <- readxl::read_xlsx("../dane surowe/Adaptacja.xlsx")
dane2 <- haven::read_sav("../dane surowe/Zbior_UAM_Emilia_Soroko3_v1 ARIADNA CIIT.sav")
dane3 <- read.csv("../dane surowe/Adaptacja-kopia 3.csv",  fileEncoding = "UTF-8")


# książka kodowa
codebook <- readr::read_delim(
  "./../dane surowe/codebook.csv",
  delim = ";",
  escape_double = FALSE,
  col_names = TRUE,
  trim_ws = TRUE
)
```


```{r}
summarytools::dfSummary(dane1, round.digits = 2, max.distinct.values = 15) %>%
  summarytools::view(footnote = '', custom.css = 'tiny_text.css', table.classes = 'tiny-text')
summarytools::dfSummary(dane2, round.digits = 2, max.distinct.values = 15) %>%
  summarytools::view(footnote = '', custom.css = 'tiny_text.css', table.classes = 'tiny-text')
summarytools::dfSummary(dane3, round.digits = 2, max.distinct.values = 15) %>%
  summarytools::view(footnote = '', custom.css = 'tiny_text.css', table.classes = 'tiny-text')

```

```{r}
## Zapis informacji ukrytych w SPSS

# Pobranie etykiet wartości
labels_list <- sapply(dane2, function(x) attr(x, "labels"), simplify = FALSE)

# Konwersja etykiet wartości do formatu string
labels_string <- sapply(labels_list, function(lbls) {
  if (is.null(lbls)) return(NA)  # Jeśli brak etykiet, zwróć NA
  paste(lbls, names(lbls), sep = ":", collapse = ", ")
}, simplify = TRUE)

# Pobranie treści pytań (etykiet zmiennych)
questions <- sapply(dane2, function(x) attr(x, "label"), simplify = TRUE)

# Tworzenie ramki danych z nazwą zmiennej, treścią pytania i etykietami wartości
labels_df <- data.frame(
  variable = names(labels_string), 
  question = questions, 
  labels = labels_string, 
  row.names = NULL
)

write.csv(labels_df, "./z_SPSS_my.csv")
rm(list=c("labels_df", "labels_list", "labels_string"))
```


```{r}

# Zmiana nazw
colnames(dane1)[!is.na(codebook$eng1)] <- codebook$eng1[!is.na(codebook$eng1)]
colnames(dane3)[!is.na(codebook$eng3[1:which(codebook$eng3 == taxonomizr::lastNotNa(codebook$eng3))])] <-
  codebook$eng3[1:which(codebook$eng3 == taxonomizr::lastNotNa(codebook$eng3))][!is.na(codebook$eng3)]
colnames(dane2)[codebook$eng2 != "REMOVE"] <- codebook$eng2[codebook$eng2 != "REMOVE"]
dane2 <- dane2[,which(codebook$eng2 != "REMOVE")] %>% select(-id_kod)

# Poprawa zmniennej/zmiennych aktywności zawodowej

dane1 = dane1 %>%
  mutate(job_activity = case_when(job_activity == 'emerytura'                ~ 'emerytura/renta',
                                  job_activity == 'praca na umowie zlecenie' ~ 'umowa zlecenie/o dzieło',
                                  TRUE ~ job_activity)) %>%
  mutate(job_activity_study                      = as.integer(str_detect(job_activity, 'uczeń/student')),
         job_activity_work                       = as.integer(str_detect(job_activity, 'stała praca')),
         job_activity_workless                   = as.integer(str_detect(job_activity, 'bezrobocie')),
         job_activity_retirement_pension         = as.integer(str_detect(job_activity, 'emerytura/renta')),
         job_activity_self_employment            = as.integer(str_detect(job_activity, 'własna działalność')),
         job_activity_temporary_job              = as.integer(str_detect(job_activity, 'praca dorywcza')),
         job_activity_contract_commissioned_work = as.integer(str_detect(job_activity, 'umowa zlecenie/o dzieło')),
         job_activity_PhD_study                  = as.integer(str_detect(job_activity, 'doktorat')),
         .after = 'job_activity', .keep = 'unused')

dane2 = dane2 %>%
  mutate(job_activity_other = job_activity_input, .keep = 'unused') %>%
  mutate(job_activity_other = case_when(job_activity_other == ''                                                                ~ NA,
                                        job_activity_other %in% c('Pracujący rencista', 'Emeryt udzielam korepetycji')          ~ 'emerytura/renta,praca dorywcza',
                                        str_detect(job_activity_other, 'mer|ren|Ren')                                           ~ 'emerytura/renta',
                                        job_activity_other %in% c('Własna działalność', 'Samozatrudnienie', 'samozatrudnienie') ~ 'własna działalność',
                                        job_activity_other %in% c('Umowa zlecenie', 'umowa o dzieło')                           ~ 'umowa zlecenie/o dzieło',
                                        job_activity_other %in% c('Urlop wychowawczy', 'Opieka nad dzieckiem')                  ~ 'urlop wychowawczy',
                                        job_activity_other %in% c('Wolontariat', 'Nie pracuje z innych powodòw') |
                                                                        str_detect(job_activity_other, 'innych')                ~ 'bezrobocie',
                                        TRUE ~ job_activity_other)) %>%
  mutate(job_activity_retirement_pension         = as.integer(str_detect(job_activity_other, 'emerytura/renta')),
         job_activity_self_employment            = as.integer(job_activity_other == 'własna działalność'),
         job_activity_temporary_job              = as.integer(str_detect(job_activity_other, 'praca dorywcza')),
         job_activity_contract_commissioned_work = as.integer(job_activity_other == 'umowa zlecenie/o dzieło'),
         job_activity_parental_leave             = as.integer(job_activity_other == 'urlop wychowawczy'),
         .after = 'job_activity_other', .keep = 'unused') %>%
  mutate(if_housing_partner = ifelse(relationship != 2, if_housing_partner, NA))

#

dane3 %>% colnames
```

```{r}

dane3 = dane3 %>%
  mutate(across(c('residence',
                  'education',
                  starts_with('change')), ~ factor(., ordered = TRUE)),  
         across(c('if_pharmacotherapy',
                  'if_life_event',
                  'if_somatic_disease'), ~ na_if(., 2)),
         across(c('relationship',
                  'gender',
                  'martial_state',
                  'if_psychotherapy_now',
                  'tenants',
                  'job_activity'), ~ na_if(., '')),
         gender = na_if(gender, 'wolę nie odpowiadać'),
         martial_state = ifelse(martial_state != 'nie mam partnera/partnerki', martial_state, 'singiel'),
         if_psychotherapy_now = ifelse(if_psychotherapy_now != 'nie ', if_psychotherapy_now, 'nie'),
         tenants = case_when(tenants == 'Inne: wynajem'                                                        ~ 'znajomi/osoby niespokrewnione',
                             tenants %in% c('inne: brak', 'inne:  nic stałego',
                                            'inne: dom pomocy społecznej', 'inne: z siostrą w domu rodzinnym') ~ 'inni',
                             tenants == 'samodzielnie'                                                         ~ 'brak',
                             TRUE                                                                              ~ tenants),
         job_activity = case_when(job_activity == 'stała praca, renta socjalna zus'        ~ 'stała praca, emerytura/renta',
                                  job_activity %in% c('inne: osoba niepełnosprawna', 
                                                      'inne: świadczenie rehabilitacyjne', 
                                                      'Inne: świadczenie rehabilitacyjne', 
                                                      'inne:renta')                        ~ 'emerytura/renta',
                                  TRUE                                                     ~ job_activity),
         if_housing_partner = ifelse(relationship != 'nie', if_housing_partner, NA)) %>%
  mutate(job_activity_study              = as.integer(str_detect(job_activity, 'uczeń/student')),
         job_activity_work               = as.integer(str_detect(job_activity, 'stała praca')),
         job_activity_workless           = as.integer(str_detect(job_activity, 'bezrobocie')),
         job_activity_retirement_pension = as.integer(str_detect(job_activity, 'emerytura/renta')),
         job_activity_self_employment    = as.integer(str_detect(job_activity, 'własna działalność')),
         .after = 'job_activity', .keep = 'unused')


# Ujednolicenie i poprawa kodowania w dane2 i dane3

dane2 = dane2 %>%
  mutate(across(matches('^CSIV|IIPC|SIFS'), function(x) x + 1),
         across(matches('^RAS'), function(x) na_if(x, 99)),
         across(starts_with('if_') & !ends_with('now'), function(x) case_when(x == 1 ~ 1,
                                                                              x == 2 ~ 0,
                                                                              x == 3 ~ NA)))
dane3 = dane3 %>%
  mutate(across(matches('^CSIV|IIPC|SIFS'), function(x) x + 1),
         #across(c(matches('\\d$'),
         #         matches('\\d+b$')), ~ factor(., ordered = TRUE))
         )  
  
#

dplyr::glimpse(dane1) 
dplyr::glimpse(dane2) 

```


Dane 1:

"id"                    "age"                   "gender"
"education"             "martial_state"         "relationship"          "job_activity"         "if_housing_partner"    "if_children"
"residence"             "tenants"
"if_pharmacotherapy"    "if_psychotherapy_now"  "if_somatic_disease"    "if_life_event"         "if_psychotherapy"
"psychotherapy_time"    "if_hospital_treatment" "if_medication"         "change_selfesteem"     "change_work"          "change_relationships"

Dane 2:

"id"                    "gender"                "age"
"residence"             "tenants"               "tenants_input"
"education"             "martial_state"         "relationship"          "job_activity"          "if_housing_partner"    "if_children"
"if_pharmacotherapy"    "if_psychotherapy_now"  "if_somatic_disease"    "if_life_event"         "if_psychotherapy"
"psychotherapy_time"    "if_hospital_treatment" "if_medication"         "change_selfesteem"     "change_work"          "change_relationships"


Dane 2 - Dane 1:

"job_activity_parental_leave"  "tenants_input"  
"CSIV_60b"     "IIPC.1_13b"     "ISC_31b"         "ISC_63b"                
"kontrola_0"     "kontrola_3"     "kontrola_7"                 
                              
 
Dane 1 - Dane 2:

"job_activity_PhD_study" "if_before_change"


```{r}

# łączenie danych


# Dodawanie brakujących kolumn w dane1 (z dane2)
missing_cols_dane1 <- setdiff(colnames(dane2), colnames(dane1))
if (length(missing_cols_dane1) > 0) {
  dane1[missing_cols_dane1] <- NA
}

dane1 <- dane1 %>%
  relocate(missing_cols_dane1, .after = 'job_activity_PhD_study')

# Dodawanie brakujących kolumn w dane2 (gdyby dane2 miało mniej kolumn)
missing_cols_dane2 <- setdiff(colnames(dane1), colnames(dane2))
if (length(missing_cols_dane2) > 0) {
  dane2[missing_cols_dane2] <- NA
}


# Dodawanie brakujących kolumn w dane1 (z dane3)
missing_cols_dane1 <- setdiff(colnames(dane3), colnames(dane1))
if (length(missing_cols_dane1) > 0) {
  dane1[missing_cols_dane1] <- NA
}

dane1 <- dane1 %>%
  relocate(missing_cols_dane1, .after = 'SCL_19')

# Dodawanie brakujących kolumn w dane3 (z dane1) (gdyby dane2 miało mniej kolumn)
missing_cols_dane3 <- setdiff(colnames(dane1), colnames(dane3))
if (length(missing_cols_dane3) > 0) {
  dane3[missing_cols_dane3] <- NA
}


# Dodawanie brakujących kolumn w dane2 (z dane1) (gdyby dane2 miało mniej kolumn)
missing_cols_dane2 <- setdiff(colnames(dane1), colnames(dane2))
if (length(missing_cols_dane2) > 0) {
  dane2[missing_cols_dane2] <- NA
}



# Zapewnienie, że kolejność kolumn jest taka sama

dane2 <- dane2[, colnames(dane1)]
dane3 <- dane3[, colnames(dane1)]


# Sprawdzenie

all.equal(names(dane1), names(dane2), names(dane3))


# Ujednolicenie typów danych
dane1 = dane1 %>%
  mutate(tenants_input = as.character(tenants_input),
         across(c('job_activity_parental_leave',
                  starts_with('kontrola')), as.integer),
         across(matches('\\d+b$'), function(x) factor(x, ordered = TRUE)))

dane2 = dane2 %>%
         mutate(across(c('gender',
                         'martial_state',
                         'relationship',
                         'if_psychotherapy_now'), as.character),
                across(c('education',
                         'residence',
                         matches('\\d$'),
                         matches('\\d+b$')), function(x) factor(x, ordered = TRUE)),
                across(c('id',
                         'age',
                         starts_with('job'),
                         starts_with('if_'),
                         -if_psychotherapy_now,
                         starts_with('kontrola')), as.integer),
                psychotherapy_time = case_when(
                                psychotherapy_time ==                           '1h' ~ 1/52, 
                                psychotherapy_time ==                  '1 spotkanie' ~ 1/52, 
                                psychotherapy_time ==                       '1dzień' ~ 1/52, 
                                psychotherapy_time ==                           '2h' ~ 1.5/52, 
                                psychotherapy_time ==                  '2 spotkania' ~ 0.5/12, 
                                psychotherapy_time ==          '4 pojedyncze wizyty' ~ 1/12,
                                psychotherapy_time ==                   '4 tygodnie' ~ 1/12, 
                                psychotherapy_time ==                   '1  miesiąc' ~ 1/12, 
                                psychotherapy_time ==                    '1 miesiąc' ~ 1/12,
                                psychotherapy_time ==                      'miesiąc' ~ 1/12,
                                psychotherapy_time ==                      'Miesiąc' ~ 1/12,
                                psychotherapy_time ==                   '2 miesiące' ~ 2/12,
                                psychotherapy_time == '3 spotkania przez 2 miesiące' ~ 2/12,
                                psychotherapy_time ==                 '2-3 miesiące' ~ 2.5/12,
                                psychotherapy_time ==                       '3 mies' ~ 3/12,
                                psychotherapy_time ==                   '3 miesiące' ~ 3/12,
                                psychotherapy_time ==                   '4 miesiące' ~ 4/12,
                                psychotherapy_time ==                   '5 miesiecy' ~ 5/12,
                                psychotherapy_time ==                   '6 miesiecy' ~ 6/12,
                                psychotherapy_time ==                   '6 miesięcy' ~ 6/12, 
                                psychotherapy_time ==                    '6miesięcy' ~ 6/12,
                                psychotherapy_time ==                    '7miesięcy' ~ 7/12, 
                                psychotherapy_time ==                        '1 rok' ~ 1, 
                                psychotherapy_time ==                  '14 miesiecy' ~ 14/12,
                                psychotherapy_time ==                     '1.5 roku' ~ 1.5,
                                psychotherapy_time ==                       '2 lara' ~ 2,   
                                psychotherapy_time ==                       '2 lata' ~ 2,
                                psychotherapy_time ==                     '2,3 lata' ~ 2.5,
                                psychotherapy_time ==                       '3 lata' ~ 3,
                                psychotherapy_time ==                       '4 lata' ~ 4,
                                psychotherapy_time ==      '2 lata, przerwa, 3 lata' ~ 5,
                                psychotherapy_time ==                        '5 lat' ~ 5,
                                psychotherapy_time ==                         '5lat' ~ 5,
                                psychotherapy_time ==                        '6 lat' ~ 6,
                                psychotherapy_time ==                        '7 lat' ~ 7,
                                psychotherapy_time ==                         '9lat' ~ 9,
                                psychotherapy_time ==                        '10lat' ~ 10,
                                psychotherapy_time ==         'od 2011 roku i nadal' ~ 14,
                                psychotherapy_time ==                        '15lat' ~ 15,
                                psychotherapy_time ==                       '20 lat' ~ 20,  
                                psychotherapy_time ==                 'Nie pamiętam' ~ NA))

dane3 = dane3 %>%
         mutate(tenants_input = as.character(tenants_input),
         across(c('job_activity_parental_leave',
                  starts_with('kontrola')), as.integer),
         across(starts_with('IJZ'), function(x) factor(x, ordered = TRUE, levels = 1:4)),
         across(matches('^(CSIV|IIPC|PICD|HSNS|SIFS|RAS|SCL)'), function(x) factor(x, ordered = TRUE, levels = 1:5)),
         across(starts_with('ISC'), function(x) factor(x, ordered = TRUE, levels = 1:8)))

```

```{r}
# Łączenie ramek danych
dane <- rbind(dane1 %>% mutate(set = as.integer(1), .before = 1),
              dane2 %>% mutate(set = as.integer(2), .before = 1),
              dane3 %>% mutate(set = as.integer(3), .before = 1)) %>%
  rename(set_id = id) %>%
  mutate(id = as.integer(1:nrow(.)), .before = 1) %>%
  mutate(across(c(starts_with('job_activity'), 'if_before_change'), function(x) replace_na(x, 0)))

dplyr::glimpse(dane) 


print(dane)
rm(list=c("dane1", "dane2", "missing_cols_dane1", "missing_cols_dane2"))
```


```{r}
# test pytań kontrolnych
dane |>
  filter(
    kontrola_0 == 0 | is.na(kontrola_0) |
    kontrola_3 != 3 | is.na(kontrola_3) |
    kontrola_7 != 7 | is.na(kontrola_7)
  ) -> dane

dane$kontrola_0 <- NULL
dane$kontrola_3 <- NULL
dane$kontrola_7 <- NULL
```



```{r}

# Recoding ifs
dane = dane %>%
  mutate(across(starts_with('if_') & !starts_with('if_psychotherapy_now'), as.factor))


## Recoding dane$gender
dane$gender[dane$gender == "1"] <- "female"
dane$gender[dane$gender == "2"] <- "male"
dane$gender[dane$gender == "inna"] <- "other"
dane$gender[dane$gender == "kobieta"] <- "female"
dane$gender[dane$gender == "mężczyzna"] <- "male"

## factors
#dane$education <- dane$education |> factor()
#dane$residence <- dane$residence |> factor()

## Recoding dane$tenants

dane$tenants[dane$tenants == "1"] <- "alone"
dane$tenants[dane$tenants == "2"] <- "parents"
dane$tenants[dane$tenants == "3"] <- "roommates"
dane$tenants[dane$tenants == "4"] <- "family_kids"
dane$tenants[dane$tenants == "5"] <- "multigenerational"
dane$tenants[dane$tenants == "6"] <- "other"
dane$tenants[dane$tenants == "brak"] <- "alone"
dane$tenants[dane$tenants == "rodzice"] <- "parents"
dane$tenants[dane$tenants == "znajomi/osoby niespokrewnione"] <- "roommates"
dane$tenants[dane$tenants == "partner/partner i dzieci"] <- "family_kids"
dane$tenants[dane$tenants == "rodzina wielopokoleniowa"] <- "multigenerational"
dane$tenants[dane$tenants == "inni"] <- "other"


dane$tenants[which(dane$tenants_input == "z dzieckiem")] <-  "family_kids"
dane$tenants[which(dane$tenants_input == "Z dzieckiem")] <-  "family_kids"
dane$tenants[which(dane$tenants_input == "z dziećmi")] <-  "family_kids"
dane$tenants[which(dane$tenants_input == "Z dziećmi")] <-  "family_kids"
dane$tenants[which(dane$tenants_input == "z dorosłym synem")] <-  "multigenerational"
dane$tenants[which(dane$tenants_input == "z dzieckiem i moją matką")] <-  "multigenerational"
dane$tenants[which(dane$tenants_input == "Z partnerem i jego rodzicami oraz młodszym bratem")] <-  "multigenerational"
dane$tenants[which(dane$tenants_input == "Z siostrą")] <-  "other"
dane$tenants[which(dane$tenants_input == "Brat,  siostra")] <-  "other"
dane$tenants[which(dane$tenants_input == "z bratem")] <-  "other"

dane$tenants_input <- NULL


## Recoding dane$martial_state
dane$martial_state[dane$martial_state == "1"] <- "single"
dane$martial_state[dane$martial_state == "2"] <- "unformal"
dane$martial_state[dane$martial_state == "3"] <- "marriage"
dane$martial_state[dane$martial_state == "4"] <- "after"
dane$martial_state[dane$martial_state == "5"] <- "after"
dane$martial_state[dane$martial_state == "singiel"] <- "single"
dane$martial_state[dane$martial_state == "związek nieformalny"] <- "unformal"
dane$martial_state[dane$martial_state == "małżeństwo"] <- "marriage"
dane$martial_state[dane$martial_state == "rozwiedziona/y lub w separacji"] <- "after"
dane$martial_state[dane$martial_state == "rozwiedziony lub w seperacji"] <- "after"
dane$martial_state[dane$martial_state == "wdowa/wdowiec"] <- "after"


## Recoding dane$relationship

dane = dane %>%
  mutate(relationship = case_when(relationship %in% c('1',           'tak') ~ 'yes',
                                  relationship %in% c('2',           'nie') ~ 'no',
                                  relationship %in% c('3', 'skomplikowane') ~ 'unclear'))


## Recoding dane$if_psychotherapy_now 

dane$if_psychotherapy_now[dane$if_psychotherapy_now == '4' & !is.na(dane$if_psychotherapy_now)] = c('nie', 'nie, ale planuję')
dane = dane %>%
  mutate(if_psychotherapy_now = case_when(if_psychotherapy_now %in% c('1', 'tak')    ~ 'yes',
                                          if_psychotherapy_now %in% c('2', 'nie')    ~ 'no',
                                          if_psychotherapy_now == 'nie, ale planuję' ~ 'in the plans'))


##########
codebook$labels[codebook$eng2=="martial_state"]
```

```{r}

# Odwrócenie itemów i poprawa kodowania

dane = dane %>%
  mutate(across(codebook %>%
                  filter(str_sub(key, 1, 1) == '-') %>%
                  pull(eng2),
                function(x) factor(6 - as.integer(x), ordered = TRUE)),
         across(matches('^CSIV|IIPC|SIFS'), function(x) factor(as.numeric(x) - 1, ordered = TRUE)))
  
```

```{r}

# Obliczenie wyników podskal

dane = dane %>%
  mutate(ISC_31a = ISC_31,
         ISC_31 = ifelse(is.na(ISC_31b), ISC_31, ISC_31b),
         across(matches('\\d$'), function(x) as.integer(x) - 1)) %>%
  rowwise() %>%
  mutate(CSIV_mean   = mean(c_across(starts_with('CSIV')   & matches('\\d$')), na.rm = TRUE),
         IIPC.1_mean = mean(c_across(starts_with('IIPC.1') & matches('\\d$')), na.rm = TRUE),
         IIPC.2_mean = mean(c_across(starts_with('IIPC.2') & matches('\\d$')), na.rm = TRUE),
         IIPC_mean   = mean(c_across(starts_with('IIPC')   & matches('\\d$')), na.rm = TRUE),
         ISC_mean    = mean(c_across(starts_with('ISC')    & matches('\\d$')), na.rm = TRUE),
         PICD_mean   = mean(c_across(starts_with('PICD')), na.rm = TRUE),
         HSNS_mean   = mean(c_across(starts_with('HSNS')), na.rm = TRUE),
         IJZ_mean    = mean(c_across(starts_with('IJZ')),  na.rm = TRUE),
         SIFS_mean   = mean(c_across(starts_with('SIFS')), na.rm = TRUE),
         RAS_mean    = mean(c_across(starts_with('RAS')),  na.rm = TRUE),
         SCL_mean    = mean(c_across(starts_with('SCL')),  na.rm = TRUE)) %>%
  ungroup() %>%
  mutate(across(matches('\\d$'), function(x) factor(as.integer(x), ordered = TRUE)))

```

```{r}

summarytools::dfSummary(dane, round.digits = 2, max.distinct.values = 15) %>%
  summarytools::view(footnote = '', custom.css = 'tiny_text.css', table.classes = 'tiny-text')

```

```{r}

save(dane, file = 'dane_all.RData', compression_level = 9)

```




